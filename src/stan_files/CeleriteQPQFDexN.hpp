/*
    CeleriteQFD is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    CeleriteQFD is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with CeleriteQFD.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0

#include <stan/model/model_header.hpp>

namespace model_CeleriteQPQFDexN_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_CeleriteQPQFDexN");
    reader.add_event(260, 258, "end", "model_CeleriteQPQFDexN");
    return reader;
}

template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__>::type>::type, Eigen::Dynamic, 1>
dotCholQuasiPeriod(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& t,
                       const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& y,
                       const T2__& B,
                       const T3__& L,
                       const T4__& P,
                       const T5__& C,
                       const Eigen::Matrix<T6__, Eigen::Dynamic, 1>& diag, std::ostream* pstream__);

template <typename T0__>
typename boost::math::tools::promote_args<T0__>::type
sigmoid(const T0__& x, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        current_statement_begin__ = 6;
        return stan::math::promote_scalar<fun_return_scalar_t__>((1 / (stan::math::exp(-(x)) + 1)));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct sigmoid_functor__ {
    template <typename T0__>
        typename boost::math::tools::promote_args<T0__>::type
    operator()(const T0__& x, std::ostream* pstream__) const {
        return sigmoid(x, pstream__);
    }
};

#include "stan_meta_header.hpp"
 class model_CeleriteQPQFDexN
  : public stan::model::model_base_crtp<model_CeleriteQPQFDexN> {
private:
        int N;
        vector_d t;
        vector_d y;
        vector_d B_prior;
        vector_d L_prior;
        vector_d P_prior;
        vector_d C_prior;
        vector_d alpha_quiet;
        vector_d alpha_firing;
        vector_d alpha_decay;
        double mu0_quiet;
        double lambda_quiet;
        vector_d gamma_noise;
        double mu0_rate_firing;
        double sigma_rate_firing;
        double mu0_rate_decay;
        double sigma_rate_decay;
        vector_d diag;
        double eps;
public:
    model_CeleriteQPQFDexN(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_CeleriteQPQFDexN(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_CeleriteQPQFDexN_namespace::model_CeleriteQPQFDexN";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            // initialize data block variables from context__
            current_statement_begin__ = 11;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 1);

            current_statement_begin__ = 12;
            validate_non_negative_index("t", "N", N);
            context__.validate_dims("data initialization", "t", "vector_d", context__.to_vec(N));
            t = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("t");
            pos__ = 0;
            size_t t_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < t_j_1_max__; ++j_1__) {
                t(j_1__) = vals_r__[pos__++];
            }

            current_statement_begin__ = 13;
            validate_non_negative_index("y", "N", N);
            context__.validate_dims("data initialization", "y", "vector_d", context__.to_vec(N));
            y = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("y");
            pos__ = 0;
            size_t y_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < y_j_1_max__; ++j_1__) {
                y(j_1__) = vals_r__[pos__++];
            }

            current_statement_begin__ = 15;
            validate_non_negative_index("B_prior", "2", 2);
            context__.validate_dims("data initialization", "B_prior", "vector_d", context__.to_vec(2));
            B_prior = Eigen::Matrix<double, Eigen::Dynamic, 1>(2);
            vals_r__ = context__.vals_r("B_prior");
            pos__ = 0;
            size_t B_prior_j_1_max__ = 2;
            for (size_t j_1__ = 0; j_1__ < B_prior_j_1_max__; ++j_1__) {
                B_prior(j_1__) = vals_r__[pos__++];
            }

            current_statement_begin__ = 16;
            validate_non_negative_index("L_prior", "2", 2);
            context__.validate_dims("data initialization", "L_prior", "vector_d", context__.to_vec(2));
            L_prior = Eigen::Matrix<double, Eigen::Dynamic, 1>(2);
            vals_r__ = context__.vals_r("L_prior");
            pos__ = 0;
            size_t L_prior_j_1_max__ = 2;
            for (size_t j_1__ = 0; j_1__ < L_prior_j_1_max__; ++j_1__) {
                L_prior(j_1__) = vals_r__[pos__++];
            }

            current_statement_begin__ = 17;
            validate_non_negative_index("P_prior", "2", 2);
            context__.validate_dims("data initialization", "P_prior", "vector_d", context__.to_vec(2));
            P_prior = Eigen::Matrix<double, Eigen::Dynamic, 1>(2);
            vals_r__ = context__.vals_r("P_prior");
            pos__ = 0;
            size_t P_prior_j_1_max__ = 2;
            for (size_t j_1__ = 0; j_1__ < P_prior_j_1_max__; ++j_1__) {
                P_prior(j_1__) = vals_r__[pos__++];
            }

            current_statement_begin__ = 18;
            validate_non_negative_index("C_prior", "2", 2);
            context__.validate_dims("data initialization", "C_prior", "vector_d", context__.to_vec(2));
            C_prior = Eigen::Matrix<double, Eigen::Dynamic, 1>(2);
            vals_r__ = context__.vals_r("C_prior");
            pos__ = 0;
            size_t C_prior_j_1_max__ = 2;
            for (size_t j_1__ = 0; j_1__ < C_prior_j_1_max__; ++j_1__) {
                C_prior(j_1__) = vals_r__[pos__++];
            }

            current_statement_begin__ = 22;
            validate_non_negative_index("alpha_quiet", "2", 2);
            context__.validate_dims("data initialization", "alpha_quiet", "vector_d", context__.to_vec(2));
            alpha_quiet = Eigen::Matrix<double, Eigen::Dynamic, 1>(2);
            vals_r__ = context__.vals_r("alpha_quiet");
            pos__ = 0;
            size_t alpha_quiet_j_1_max__ = 2;
            for (size_t j_1__ = 0; j_1__ < alpha_quiet_j_1_max__; ++j_1__) {
                alpha_quiet(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "alpha_quiet", alpha_quiet, 0);

            current_statement_begin__ = 24;
            validate_non_negative_index("alpha_firing", "2", 2);
            context__.validate_dims("data initialization", "alpha_firing", "vector_d", context__.to_vec(2));
            alpha_firing = Eigen::Matrix<double, Eigen::Dynamic, 1>(2);
            vals_r__ = context__.vals_r("alpha_firing");
            pos__ = 0;
            size_t alpha_firing_j_1_max__ = 2;
            for (size_t j_1__ = 0; j_1__ < alpha_firing_j_1_max__; ++j_1__) {
                alpha_firing(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "alpha_firing", alpha_firing, 0);

            current_statement_begin__ = 26;
            validate_non_negative_index("alpha_decay", "3", 3);
            context__.validate_dims("data initialization", "alpha_decay", "vector_d", context__.to_vec(3));
            alpha_decay = Eigen::Matrix<double, Eigen::Dynamic, 1>(3);
            vals_r__ = context__.vals_r("alpha_decay");
            pos__ = 0;
            size_t alpha_decay_j_1_max__ = 3;
            for (size_t j_1__ = 0; j_1__ < alpha_decay_j_1_max__; ++j_1__) {
                alpha_decay(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "alpha_decay", alpha_decay, 0);

            current_statement_begin__ = 28;
            context__.validate_dims("data initialization", "mu0_quiet", "double", context__.to_vec());
            mu0_quiet = double(0);
            vals_r__ = context__.vals_r("mu0_quiet");
            pos__ = 0;
            mu0_quiet = vals_r__[pos__++];

            current_statement_begin__ = 29;
            context__.validate_dims("data initialization", "lambda_quiet", "double", context__.to_vec());
            lambda_quiet = double(0);
            vals_r__ = context__.vals_r("lambda_quiet");
            pos__ = 0;
            lambda_quiet = vals_r__[pos__++];

            current_statement_begin__ = 30;
            validate_non_negative_index("gamma_noise", "2", 2);
            context__.validate_dims("data initialization", "gamma_noise", "vector_d", context__.to_vec(2));
            gamma_noise = Eigen::Matrix<double, Eigen::Dynamic, 1>(2);
            vals_r__ = context__.vals_r("gamma_noise");
            pos__ = 0;
            size_t gamma_noise_j_1_max__ = 2;
            for (size_t j_1__ = 0; j_1__ < gamma_noise_j_1_max__; ++j_1__) {
                gamma_noise(j_1__) = vals_r__[pos__++];
            }

            current_statement_begin__ = 32;
            context__.validate_dims("data initialization", "mu0_rate_firing", "double", context__.to_vec());
            mu0_rate_firing = double(0);
            vals_r__ = context__.vals_r("mu0_rate_firing");
            pos__ = 0;
            mu0_rate_firing = vals_r__[pos__++];

            current_statement_begin__ = 33;
            context__.validate_dims("data initialization", "sigma_rate_firing", "double", context__.to_vec());
            sigma_rate_firing = double(0);
            vals_r__ = context__.vals_r("sigma_rate_firing");
            pos__ = 0;
            sigma_rate_firing = vals_r__[pos__++];
            check_greater_or_equal(function__, "sigma_rate_firing", sigma_rate_firing, 0);

            current_statement_begin__ = 35;
            context__.validate_dims("data initialization", "mu0_rate_decay", "double", context__.to_vec());
            mu0_rate_decay = double(0);
            vals_r__ = context__.vals_r("mu0_rate_decay");
            pos__ = 0;
            mu0_rate_decay = vals_r__[pos__++];

            current_statement_begin__ = 36;
            context__.validate_dims("data initialization", "sigma_rate_decay", "double", context__.to_vec());
            sigma_rate_decay = double(0);
            vals_r__ = context__.vals_r("sigma_rate_decay");
            pos__ = 0;
            sigma_rate_decay = vals_r__[pos__++];
            check_greater_or_equal(function__, "sigma_rate_decay", sigma_rate_decay, 0);

            current_statement_begin__ = 38;
            validate_non_negative_index("diag", "N", N);
            context__.validate_dims("data initialization", "diag", "vector_d", context__.to_vec(N));
            diag = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("diag");
            pos__ = 0;
            size_t diag_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < diag_j_1_max__; ++j_1__) {
                diag(j_1__) = vals_r__[pos__++];
            }


            // initialize transformed data variables
            current_statement_begin__ = 42;
            eps = double(0);
            stan::math::fill(eps, DUMMY_VAR__);
            stan::math::assign(eps,1e-9);

            // execute transformed data statements

            // validate transformed data

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 47;
            validate_non_negative_index("eta", "N", N);
            num_params_r__ += N;
            current_statement_begin__ = 48;
            num_params_r__ += 1;
            current_statement_begin__ = 49;
            num_params_r__ += 1;
            current_statement_begin__ = 50;
            num_params_r__ += 1;
            current_statement_begin__ = 51;
            num_params_r__ += 1;
            current_statement_begin__ = 53;
            validate_non_negative_index("theta_quiet", "2", 2);
            num_params_r__ += (2 - 1);
            current_statement_begin__ = 54;
            num_params_r__ += 1;
            current_statement_begin__ = 55;
            num_params_r__ += 1;
            current_statement_begin__ = 57;
            validate_non_negative_index("theta_firing", "2", 2);
            num_params_r__ += (2 - 1);
            current_statement_begin__ = 58;
            num_params_r__ += 1;
            current_statement_begin__ = 60;
            validate_non_negative_index("theta_decay", "3", 3);
            num_params_r__ += (3 - 1);
            current_statement_begin__ = 61;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~model_CeleriteQPQFDexN() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        current_statement_begin__ = 47;
        if (!(context__.contains_r("eta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable eta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("eta");
        pos__ = 0U;
        validate_non_negative_index("eta", "N", N);
        context__.validate_dims("parameter initialization", "eta", "vector_d", context__.to_vec(N));
        Eigen::Matrix<double, Eigen::Dynamic, 1> eta(N);
        size_t eta_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < eta_j_1_max__; ++j_1__) {
            eta(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(eta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable eta: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 48;
        if (!(context__.contains_r("lB")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable lB missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("lB");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "lB", "double", context__.to_vec());
        double lB(0);
        lB = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(get_base1(B_prior, 1, "B_prior", 1), get_base1(B_prior, 2, "B_prior", 1), lB);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable lB: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 49;
        if (!(context__.contains_r("lL")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable lL missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("lL");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "lL", "double", context__.to_vec());
        double lL(0);
        lL = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(get_base1(L_prior, 1, "L_prior", 1), get_base1(L_prior, 2, "L_prior", 1), lL);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable lL: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 50;
        if (!(context__.contains_r("lP")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable lP missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("lP");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "lP", "double", context__.to_vec());
        double lP(0);
        lP = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(get_base1(P_prior, 1, "P_prior", 1), get_base1(P_prior, 2, "P_prior", 1), lP);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable lP: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 51;
        if (!(context__.contains_r("lC")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable lC missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("lC");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "lC", "double", context__.to_vec());
        double lC(0);
        lC = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(get_base1(C_prior, 1, "C_prior", 1), get_base1(C_prior, 2, "C_prior", 1), lC);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable lC: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 53;
        if (!(context__.contains_r("theta_quiet")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable theta_quiet missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("theta_quiet");
        pos__ = 0U;
        validate_non_negative_index("theta_quiet", "2", 2);
        context__.validate_dims("parameter initialization", "theta_quiet", "vector_d", context__.to_vec(2));
        Eigen::Matrix<double, Eigen::Dynamic, 1> theta_quiet(2);
        size_t theta_quiet_j_1_max__ = 2;
        for (size_t j_1__ = 0; j_1__ < theta_quiet_j_1_max__; ++j_1__) {
            theta_quiet(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.simplex_unconstrain(theta_quiet);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable theta_quiet: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 54;
        if (!(context__.contains_r("mu_quiet")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable mu_quiet missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("mu_quiet");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "mu_quiet", "double", context__.to_vec());
        double mu_quiet(0);
        mu_quiet = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(mu_quiet);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable mu_quiet: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 55;
        if (!(context__.contains_r("sigma2_noise")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma2_noise missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma2_noise");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma2_noise", "double", context__.to_vec());
        double sigma2_noise(0);
        sigma2_noise = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigma2_noise);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma2_noise: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 57;
        if (!(context__.contains_r("theta_firing")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable theta_firing missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("theta_firing");
        pos__ = 0U;
        validate_non_negative_index("theta_firing", "2", 2);
        context__.validate_dims("parameter initialization", "theta_firing", "vector_d", context__.to_vec(2));
        Eigen::Matrix<double, Eigen::Dynamic, 1> theta_firing(2);
        size_t theta_firing_j_1_max__ = 2;
        for (size_t j_1__ = 0; j_1__ < theta_firing_j_1_max__; ++j_1__) {
            theta_firing(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.simplex_unconstrain(theta_firing);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable theta_firing: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 58;
        if (!(context__.contains_r("lograte_firing")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable lograte_firing missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("lograte_firing");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "lograte_firing", "double", context__.to_vec());
        double lograte_firing(0);
        lograte_firing = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(lograte_firing);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable lograte_firing: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 60;
        if (!(context__.contains_r("theta_decay")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable theta_decay missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("theta_decay");
        pos__ = 0U;
        validate_non_negative_index("theta_decay", "3", 3);
        context__.validate_dims("parameter initialization", "theta_decay", "vector_d", context__.to_vec(3));
        Eigen::Matrix<double, Eigen::Dynamic, 1> theta_decay(3);
        size_t theta_decay_j_1_max__ = 3;
        for (size_t j_1__ = 0; j_1__ < theta_decay_j_1_max__; ++j_1__) {
            theta_decay(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.simplex_unconstrain(theta_decay);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable theta_decay: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 61;
        if (!(context__.contains_r("logitrate_decay")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable logitrate_decay missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("logitrate_decay");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "logitrate_decay", "double", context__.to_vec());
        double logitrate_decay(0);
        logitrate_decay = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(logitrate_decay);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable logitrate_decay: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);

            // model parameters
            current_statement_begin__ = 47;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> eta;
            (void) eta;  // dummy to suppress unused var warning
            if (jacobian__)
                eta = in__.vector_constrain(N, lp__);
            else
                eta = in__.vector_constrain(N);

            current_statement_begin__ = 48;
            local_scalar_t__ lB;
            (void) lB;  // dummy to suppress unused var warning
            if (jacobian__)
                lB = in__.scalar_lub_constrain(get_base1(B_prior, 1, "B_prior", 1), get_base1(B_prior, 2, "B_prior", 1), lp__);
            else
                lB = in__.scalar_lub_constrain(get_base1(B_prior, 1, "B_prior", 1), get_base1(B_prior, 2, "B_prior", 1));

            current_statement_begin__ = 49;
            local_scalar_t__ lL;
            (void) lL;  // dummy to suppress unused var warning
            if (jacobian__)
                lL = in__.scalar_lub_constrain(get_base1(L_prior, 1, "L_prior", 1), get_base1(L_prior, 2, "L_prior", 1), lp__);
            else
                lL = in__.scalar_lub_constrain(get_base1(L_prior, 1, "L_prior", 1), get_base1(L_prior, 2, "L_prior", 1));

            current_statement_begin__ = 50;
            local_scalar_t__ lP;
            (void) lP;  // dummy to suppress unused var warning
            if (jacobian__)
                lP = in__.scalar_lub_constrain(get_base1(P_prior, 1, "P_prior", 1), get_base1(P_prior, 2, "P_prior", 1), lp__);
            else
                lP = in__.scalar_lub_constrain(get_base1(P_prior, 1, "P_prior", 1), get_base1(P_prior, 2, "P_prior", 1));

            current_statement_begin__ = 51;
            local_scalar_t__ lC;
            (void) lC;  // dummy to suppress unused var warning
            if (jacobian__)
                lC = in__.scalar_lub_constrain(get_base1(C_prior, 1, "C_prior", 1), get_base1(C_prior, 2, "C_prior", 1), lp__);
            else
                lC = in__.scalar_lub_constrain(get_base1(C_prior, 1, "C_prior", 1), get_base1(C_prior, 2, "C_prior", 1));

            current_statement_begin__ = 53;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> theta_quiet;
            (void) theta_quiet;  // dummy to suppress unused var warning
            if (jacobian__)
                theta_quiet = in__.simplex_constrain(2, lp__);
            else
                theta_quiet = in__.simplex_constrain(2);

            current_statement_begin__ = 54;
            local_scalar_t__ mu_quiet;
            (void) mu_quiet;  // dummy to suppress unused var warning
            if (jacobian__)
                mu_quiet = in__.scalar_constrain(lp__);
            else
                mu_quiet = in__.scalar_constrain();

            current_statement_begin__ = 55;
            local_scalar_t__ sigma2_noise;
            (void) sigma2_noise;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma2_noise = in__.scalar_lb_constrain(0, lp__);
            else
                sigma2_noise = in__.scalar_lb_constrain(0);

            current_statement_begin__ = 57;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> theta_firing;
            (void) theta_firing;  // dummy to suppress unused var warning
            if (jacobian__)
                theta_firing = in__.simplex_constrain(2, lp__);
            else
                theta_firing = in__.simplex_constrain(2);

            current_statement_begin__ = 58;
            local_scalar_t__ lograte_firing;
            (void) lograte_firing;  // dummy to suppress unused var warning
            if (jacobian__)
                lograte_firing = in__.scalar_constrain(lp__);
            else
                lograte_firing = in__.scalar_constrain();

            current_statement_begin__ = 60;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> theta_decay;
            (void) theta_decay;  // dummy to suppress unused var warning
            if (jacobian__)
                theta_decay = in__.simplex_constrain(3, lp__);
            else
                theta_decay = in__.simplex_constrain(3);

            current_statement_begin__ = 61;
            local_scalar_t__ logitrate_decay;
            (void) logitrate_decay;  // dummy to suppress unused var warning
            if (jacobian__)
                logitrate_decay = in__.scalar_constrain(lp__);
            else
                logitrate_decay = in__.scalar_constrain();

            // transformed parameters
            current_statement_begin__ = 65;
            local_scalar_t__ B;
            (void) B;  // dummy to suppress unused var warning
            stan::math::initialize(B, DUMMY_VAR__);
            stan::math::fill(B, DUMMY_VAR__);

            current_statement_begin__ = 66;
            local_scalar_t__ L;
            (void) L;  // dummy to suppress unused var warning
            stan::math::initialize(L, DUMMY_VAR__);
            stan::math::fill(L, DUMMY_VAR__);

            current_statement_begin__ = 67;
            local_scalar_t__ P;
            (void) P;  // dummy to suppress unused var warning
            stan::math::initialize(P, DUMMY_VAR__);
            stan::math::fill(P, DUMMY_VAR__);

            current_statement_begin__ = 68;
            local_scalar_t__ C;
            (void) C;  // dummy to suppress unused var warning
            stan::math::initialize(C, DUMMY_VAR__);
            stan::math::fill(C, DUMMY_VAR__);

            current_statement_begin__ = 69;
            local_scalar_t__ rate_firing;
            (void) rate_firing;  // dummy to suppress unused var warning
            stan::math::initialize(rate_firing, DUMMY_VAR__);
            stan::math::fill(rate_firing, DUMMY_VAR__);

            current_statement_begin__ = 70;
            local_scalar_t__ rate_decay;
            (void) rate_decay;  // dummy to suppress unused var warning
            stan::math::initialize(rate_decay, DUMMY_VAR__);
            stan::math::fill(rate_decay, DUMMY_VAR__);

            // transformed parameters block statements
            current_statement_begin__ = 71;
            stan::math::assign(B, stan::math::exp(lB));
            current_statement_begin__ = 72;
            stan::math::assign(L, stan::math::exp(lL));
            current_statement_begin__ = 73;
            stan::math::assign(P, stan::math::exp(lP));
            current_statement_begin__ = 74;
            stan::math::assign(C, stan::math::exp(lC));
            current_statement_begin__ = 75;
            stan::math::assign(rate_firing, stan::math::exp(lograte_firing));
            current_statement_begin__ = 76;
            stan::math::assign(rate_decay, sigmoid(logitrate_decay, pstream__));

            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            current_statement_begin__ = 65;
            if (stan::math::is_uninitialized(B)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: B";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable B: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            current_statement_begin__ = 66;
            if (stan::math::is_uninitialized(L)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: L";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable L: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            current_statement_begin__ = 67;
            if (stan::math::is_uninitialized(P)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: P";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable P: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            current_statement_begin__ = 68;
            if (stan::math::is_uninitialized(C)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: C";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable C: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            current_statement_begin__ = 69;
            if (stan::math::is_uninitialized(rate_firing)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: rate_firing";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable rate_firing: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            current_statement_begin__ = 70;
            if (stan::math::is_uninitialized(rate_decay)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: rate_decay";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable rate_decay: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }

            // model body
            {
            current_statement_begin__ = 80;
            validate_non_negative_index("trend", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> trend(N);
            stan::math::initialize(trend, DUMMY_VAR__);
            stan::math::fill(trend, DUMMY_VAR__);

            current_statement_begin__ = 81;
            validate_non_negative_index("yd", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> yd(N);
            stan::math::initialize(yd, DUMMY_VAR__);
            stan::math::fill(yd, DUMMY_VAR__);

            current_statement_begin__ = 82;
            validate_non_negative_index("accu_quiet", "2", 2);
            std::vector<local_scalar_t__  > accu_quiet(2, local_scalar_t__(DUMMY_VAR__));
            stan::math::initialize(accu_quiet, DUMMY_VAR__);
            stan::math::fill(accu_quiet, DUMMY_VAR__);

            current_statement_begin__ = 83;
            validate_non_negative_index("accu_firing", "3", 3);
            std::vector<local_scalar_t__  > accu_firing(3, local_scalar_t__(DUMMY_VAR__));
            stan::math::initialize(accu_firing, DUMMY_VAR__);
            stan::math::fill(accu_firing, DUMMY_VAR__);

            current_statement_begin__ = 84;
            validate_non_negative_index("accu_decay", "2", 2);
            std::vector<local_scalar_t__  > accu_decay(2, local_scalar_t__(DUMMY_VAR__));
            stan::math::initialize(accu_decay, DUMMY_VAR__);
            stan::math::fill(accu_decay, DUMMY_VAR__);

            current_statement_begin__ = 85;
            validate_non_negative_index("gamma", "(N - 1)", (N - 1));
            validate_non_negative_index("gamma", "3", 3);
            std::vector<std::vector<local_scalar_t__  >  > gamma((N - 1), std::vector<local_scalar_t__>(3, local_scalar_t__(DUMMY_VAR__)));
            stan::math::initialize(gamma, DUMMY_VAR__);
            stan::math::fill(gamma, DUMMY_VAR__);


            current_statement_begin__ = 87;
            stan::math::assign(trend, dotCholQuasiPeriod(t, eta, B, L, P, C, diag, pstream__));
            current_statement_begin__ = 88;
            lp_accum__.add(normal_log<propto__>(eta, 0, 1));
            current_statement_begin__ = 93;
            lp_accum__.add(inv_gamma_log<propto__>(sigma2_noise, get_base1(gamma_noise, 1, "gamma_noise", 1), get_base1(gamma_noise, 2, "gamma_noise", 1)));
            current_statement_begin__ = 95;
            lp_accum__.add(normal_log<propto__>(mu_quiet, mu0_quiet, stan::math::sqrt((sigma2_noise / lambda_quiet))));
            current_statement_begin__ = 98;
            lp_accum__.add(normal_log<propto__>(lograte_firing, mu0_rate_firing, sigma_rate_firing));
            current_statement_begin__ = 99;
            lp_accum__.add(normal_log<propto__>(logitrate_decay, mu0_rate_decay, sigma_rate_decay));
            current_statement_begin__ = 101;
            lp_accum__.add(dirichlet_log<propto__>(theta_quiet, alpha_quiet));
            current_statement_begin__ = 102;
            lp_accum__.add(dirichlet_log<propto__>(theta_firing, alpha_firing));
            current_statement_begin__ = 103;
            lp_accum__.add(dirichlet_log<propto__>(theta_decay, alpha_decay));
            current_statement_begin__ = 108;
            stan::math::assign(yd, subtract(subtract(y, trend), mu_quiet));
            current_statement_begin__ = 115;
            stan::model::assign(gamma, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                        normal_log(get_base1(yd, 2, "yd", 1), 0, stan::math::sqrt(sigma2_noise)), 
                        "assigning variable gamma");
            current_statement_begin__ = 117;
            stan::model::assign(gamma, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                        exp_mod_normal_log(get_base1(yd, 2, "yd", 1), get_base1(yd, 1, "yd", 1), stan::math::sqrt(sigma2_noise), rate_firing), 
                        "assigning variable gamma");
            current_statement_begin__ = 119;
            stan::model::assign(gamma, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list())), 
                        normal_log(get_base1(yd, 2, "yd", 1), (rate_decay * get_base1(yd, 1, "yd", 1)), stan::math::sqrt(sigma2_noise)), 
                        "assigning variable gamma");
            current_statement_begin__ = 122;
            for (int tt = 2; tt <= (N - 1); ++tt) {

                current_statement_begin__ = 125;
                stan::model::assign(accu_quiet, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                            ((get_base1(get_base1(gamma, (tt - 1), "gamma", 1), 1, "gamma", 2) + stan::math::log(get_base1(theta_quiet, 1, "theta_quiet", 1))) + normal_log(get_base1(yd, (tt + 1), "yd", 1), 0, stan::math::sqrt(sigma2_noise))), 
                            "assigning variable accu_quiet");
                current_statement_begin__ = 128;
                stan::model::assign(accu_quiet, 
                            stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()), 
                            ((get_base1(get_base1(gamma, (tt - 1), "gamma", 1), 3, "gamma", 2) + stan::math::log(get_base1(theta_decay, 1, "theta_decay", 1))) + normal_log(get_base1(yd, (tt + 1), "yd", 1), 0, stan::math::sqrt(sigma2_noise))), 
                            "assigning variable accu_quiet");
                current_statement_begin__ = 131;
                stan::model::assign(gamma, 
                            stan::model::cons_list(stan::model::index_uni(tt), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                            log_sum_exp(accu_quiet), 
                            "assigning variable gamma");
                current_statement_begin__ = 135;
                stan::model::assign(accu_firing, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                            ((get_base1(get_base1(gamma, (tt - 1), "gamma", 1), 1, "gamma", 2) + stan::math::log(get_base1(theta_quiet, 2, "theta_quiet", 1))) + exp_mod_normal_log(get_base1(yd, (tt + 1), "yd", 1), get_base1(yd, tt, "yd", 1), stan::math::sqrt(sigma2_noise), rate_firing)), 
                            "assigning variable accu_firing");
                current_statement_begin__ = 138;
                stan::model::assign(accu_firing, 
                            stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()), 
                            ((get_base1(get_base1(gamma, (tt - 1), "gamma", 1), 2, "gamma", 2) + stan::math::log(get_base1(theta_firing, 1, "theta_firing", 1))) + exp_mod_normal_log(get_base1(yd, (tt + 1), "yd", 1), get_base1(yd, tt, "yd", 1), stan::math::sqrt(sigma2_noise), rate_firing)), 
                            "assigning variable accu_firing");
                current_statement_begin__ = 141;
                stan::model::assign(accu_firing, 
                            stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list()), 
                            ((get_base1(get_base1(gamma, (tt - 1), "gamma", 1), 3, "gamma", 2) + stan::math::log(get_base1(theta_decay, 2, "theta_decay", 1))) + exp_mod_normal_log(get_base1(yd, (tt + 1), "yd", 1), get_base1(yd, tt, "yd", 1), stan::math::sqrt(sigma2_noise), rate_firing)), 
                            "assigning variable accu_firing");
                current_statement_begin__ = 143;
                stan::model::assign(gamma, 
                            stan::model::cons_list(stan::model::index_uni(tt), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                            log_sum_exp(accu_firing), 
                            "assigning variable gamma");
                current_statement_begin__ = 147;
                stan::model::assign(accu_decay, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                            ((get_base1(get_base1(gamma, (tt - 1), "gamma", 1), 2, "gamma", 2) + stan::math::log(get_base1(theta_firing, 2, "theta_firing", 1))) + normal_log(get_base1(yd, (tt + 1), "yd", 1), (rate_decay * get_base1(yd, tt, "yd", 1)), stan::math::sqrt(sigma2_noise))), 
                            "assigning variable accu_decay");
                current_statement_begin__ = 150;
                stan::model::assign(accu_decay, 
                            stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()), 
                            ((get_base1(get_base1(gamma, (tt - 1), "gamma", 1), 3, "gamma", 2) + stan::math::log(get_base1(theta_decay, 3, "theta_decay", 1))) + normal_log(get_base1(yd, (tt + 1), "yd", 1), (rate_decay * get_base1(yd, tt, "yd", 1)), stan::math::sqrt(sigma2_noise))), 
                            "assigning variable accu_decay");
                current_statement_begin__ = 152;
                stan::model::assign(gamma, 
                            stan::model::cons_list(stan::model::index_uni(tt), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list())), 
                            log_sum_exp(accu_decay), 
                            "assigning variable gamma");
            }
            current_statement_begin__ = 155;
            lp_accum__.add(log_sum_exp(get_base1(gamma, (N - 1), "gamma", 1)));
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("eta");
        names__.push_back("lB");
        names__.push_back("lL");
        names__.push_back("lP");
        names__.push_back("lC");
        names__.push_back("theta_quiet");
        names__.push_back("mu_quiet");
        names__.push_back("sigma2_noise");
        names__.push_back("theta_firing");
        names__.push_back("lograte_firing");
        names__.push_back("theta_decay");
        names__.push_back("logitrate_decay");
        names__.push_back("B");
        names__.push_back("L");
        names__.push_back("P");
        names__.push_back("C");
        names__.push_back("rate_firing");
        names__.push_back("rate_decay");
        names__.push_back("viterbi");
        names__.push_back("trend");
        names__.push_back("log_p_state");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(3);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((N - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_CeleriteQPQFDexN_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning

        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, 1> eta = in__.vector_constrain(N);
        size_t eta_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < eta_j_1_max__; ++j_1__) {
            vars__.push_back(eta(j_1__));
        }

        double lB = in__.scalar_lub_constrain(get_base1(B_prior, 1, "B_prior", 1), get_base1(B_prior, 2, "B_prior", 1));
        vars__.push_back(lB);

        double lL = in__.scalar_lub_constrain(get_base1(L_prior, 1, "L_prior", 1), get_base1(L_prior, 2, "L_prior", 1));
        vars__.push_back(lL);

        double lP = in__.scalar_lub_constrain(get_base1(P_prior, 1, "P_prior", 1), get_base1(P_prior, 2, "P_prior", 1));
        vars__.push_back(lP);

        double lC = in__.scalar_lub_constrain(get_base1(C_prior, 1, "C_prior", 1), get_base1(C_prior, 2, "C_prior", 1));
        vars__.push_back(lC);

        Eigen::Matrix<double, Eigen::Dynamic, 1> theta_quiet = in__.simplex_constrain(2);
        size_t theta_quiet_j_1_max__ = 2;
        for (size_t j_1__ = 0; j_1__ < theta_quiet_j_1_max__; ++j_1__) {
            vars__.push_back(theta_quiet(j_1__));
        }

        double mu_quiet = in__.scalar_constrain();
        vars__.push_back(mu_quiet);

        double sigma2_noise = in__.scalar_lb_constrain(0);
        vars__.push_back(sigma2_noise);

        Eigen::Matrix<double, Eigen::Dynamic, 1> theta_firing = in__.simplex_constrain(2);
        size_t theta_firing_j_1_max__ = 2;
        for (size_t j_1__ = 0; j_1__ < theta_firing_j_1_max__; ++j_1__) {
            vars__.push_back(theta_firing(j_1__));
        }

        double lograte_firing = in__.scalar_constrain();
        vars__.push_back(lograte_firing);

        Eigen::Matrix<double, Eigen::Dynamic, 1> theta_decay = in__.simplex_constrain(3);
        size_t theta_decay_j_1_max__ = 3;
        for (size_t j_1__ = 0; j_1__ < theta_decay_j_1_max__; ++j_1__) {
            vars__.push_back(theta_decay(j_1__));
        }

        double logitrate_decay = in__.scalar_constrain();
        vars__.push_back(logitrate_decay);

        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        if (!include_tparams__ && !include_gqs__) return;

        try {
            // declare and define transformed parameters
            current_statement_begin__ = 65;
            double B;
            (void) B;  // dummy to suppress unused var warning
            stan::math::initialize(B, DUMMY_VAR__);
            stan::math::fill(B, DUMMY_VAR__);

            current_statement_begin__ = 66;
            double L;
            (void) L;  // dummy to suppress unused var warning
            stan::math::initialize(L, DUMMY_VAR__);
            stan::math::fill(L, DUMMY_VAR__);

            current_statement_begin__ = 67;
            double P;
            (void) P;  // dummy to suppress unused var warning
            stan::math::initialize(P, DUMMY_VAR__);
            stan::math::fill(P, DUMMY_VAR__);

            current_statement_begin__ = 68;
            double C;
            (void) C;  // dummy to suppress unused var warning
            stan::math::initialize(C, DUMMY_VAR__);
            stan::math::fill(C, DUMMY_VAR__);

            current_statement_begin__ = 69;
            double rate_firing;
            (void) rate_firing;  // dummy to suppress unused var warning
            stan::math::initialize(rate_firing, DUMMY_VAR__);
            stan::math::fill(rate_firing, DUMMY_VAR__);

            current_statement_begin__ = 70;
            double rate_decay;
            (void) rate_decay;  // dummy to suppress unused var warning
            stan::math::initialize(rate_decay, DUMMY_VAR__);
            stan::math::fill(rate_decay, DUMMY_VAR__);

            // do transformed parameters statements
            current_statement_begin__ = 71;
            stan::math::assign(B, stan::math::exp(lB));
            current_statement_begin__ = 72;
            stan::math::assign(L, stan::math::exp(lL));
            current_statement_begin__ = 73;
            stan::math::assign(P, stan::math::exp(lP));
            current_statement_begin__ = 74;
            stan::math::assign(C, stan::math::exp(lC));
            current_statement_begin__ = 75;
            stan::math::assign(rate_firing, stan::math::exp(lograte_firing));
            current_statement_begin__ = 76;
            stan::math::assign(rate_decay, sigmoid(logitrate_decay, pstream__));

            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            // write transformed parameters
            if (include_tparams__) {
                vars__.push_back(B);
                vars__.push_back(L);
                vars__.push_back(P);
                vars__.push_back(C);
                vars__.push_back(rate_firing);
                vars__.push_back(rate_decay);
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 159;
            validate_non_negative_index("viterbi", "(N - 1)", (N - 1));
            std::vector<int> viterbi((N - 1), int(0));
            stan::math::fill(viterbi, std::numeric_limits<int>::min());

            current_statement_begin__ = 160;
            validate_non_negative_index("trend", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> trend(N);
            stan::math::initialize(trend, DUMMY_VAR__);
            stan::math::fill(trend, DUMMY_VAR__);

            current_statement_begin__ = 161;
            double log_p_state;
            (void) log_p_state;  // dummy to suppress unused var warning
            stan::math::initialize(log_p_state, DUMMY_VAR__);
            stan::math::fill(log_p_state, DUMMY_VAR__);

            // generated quantities statements
            {
            current_statement_begin__ = 164;
            validate_non_negative_index("back_ptr", "(N - 1)", (N - 1));
            validate_non_negative_index("back_ptr", "3", 3);
            std::vector<std::vector<int  >  > back_ptr((N - 1), std::vector<int>(3, int(0)));
            stan::math::fill(back_ptr, std::numeric_limits<int>::min());

            current_statement_begin__ = 165;
            validate_non_negative_index("best_logp", "(N - 1)", (N - 1));
            validate_non_negative_index("best_logp", "3", 3);
            std::vector<std::vector<local_scalar_t__  >  > best_logp((N - 1), std::vector<local_scalar_t__>(3, local_scalar_t__(DUMMY_VAR__)));
            stan::math::initialize(best_logp, DUMMY_VAR__);
            stan::math::fill(best_logp, DUMMY_VAR__);

            current_statement_begin__ = 166;
            local_scalar_t__ best_total_logp(DUMMY_VAR__);
            (void) best_total_logp;  // dummy to suppress unused var warning
            stan::math::initialize(best_total_logp, DUMMY_VAR__);
            stan::math::fill(best_total_logp, DUMMY_VAR__);

            current_statement_begin__ = 167;
            local_scalar_t__ logp(DUMMY_VAR__);
            (void) logp;  // dummy to suppress unused var warning
            stan::math::initialize(logp, DUMMY_VAR__);
            stan::math::fill(logp, DUMMY_VAR__);

            current_statement_begin__ = 168;
            validate_non_negative_index("yd", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> yd(N);
            stan::math::initialize(yd, DUMMY_VAR__);
            stan::math::fill(yd, DUMMY_VAR__);


            current_statement_begin__ = 169;
            stan::math::assign(trend, dotCholQuasiPeriod(t, eta, B, L, P, C, diag, pstream__));
            current_statement_begin__ = 170;
            stan::math::assign(yd, subtract(subtract(y, trend), mu_quiet));
            current_statement_begin__ = 173;
            stan::model::assign(best_logp, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                        normal_log(get_base1(yd, 2, "yd", 1), 0, stan::math::sqrt(sigma2_noise)), 
                        "assigning variable best_logp");
            current_statement_begin__ = 175;
            stan::model::assign(best_logp, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                        exp_mod_normal_log(get_base1(yd, 2, "yd", 1), get_base1(yd, 1, "yd", 1), stan::math::sqrt(sigma2_noise), rate_firing), 
                        "assigning variable best_logp");
            current_statement_begin__ = 177;
            stan::model::assign(best_logp, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list())), 
                        normal_log(get_base1(yd, 2, "yd", 1), (rate_decay * get_base1(yd, 1, "yd", 1)), stan::math::sqrt(sigma2_noise)), 
                        "assigning variable best_logp");
            current_statement_begin__ = 179;
            for (int tt = 2; tt <= (N - 1); ++tt) {

                current_statement_begin__ = 181;
                stan::model::assign(best_logp, 
                            stan::model::cons_list(stan::model::index_uni(tt), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                            stan::math::negative_infinity(), 
                            "assigning variable best_logp");
                current_statement_begin__ = 183;
                stan::math::assign(logp, ((get_base1(get_base1(best_logp, (tt - 1), "best_logp", 1), 1, "best_logp", 2) + stan::math::log(get_base1(theta_quiet, 1, "theta_quiet", 1))) + normal_log(get_base1(yd, (tt + 1), "yd", 1), 0, stan::math::sqrt(sigma2_noise))));
                current_statement_begin__ = 185;
                if (as_bool(logical_gt(logp, get_base1(get_base1(best_logp, tt, "best_logp", 1), 1, "best_logp", 2)))) {

                    current_statement_begin__ = 186;
                    stan::model::assign(back_ptr, 
                                stan::model::cons_list(stan::model::index_uni(tt), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                                1, 
                                "assigning variable back_ptr");
                    current_statement_begin__ = 187;
                    stan::model::assign(best_logp, 
                                stan::model::cons_list(stan::model::index_uni(tt), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                                logp, 
                                "assigning variable best_logp");
                }
                current_statement_begin__ = 191;
                stan::math::assign(logp, ((get_base1(get_base1(best_logp, (tt - 1), "best_logp", 1), 3, "best_logp", 2) + stan::math::log(get_base1(theta_decay, 1, "theta_decay", 1))) + normal_log(get_base1(yd, (tt + 1), "yd", 1), 0, stan::math::sqrt(sigma2_noise))));
                current_statement_begin__ = 193;
                if (as_bool(logical_gt(logp, get_base1(get_base1(best_logp, tt, "best_logp", 1), 1, "best_logp", 2)))) {

                    current_statement_begin__ = 194;
                    stan::model::assign(back_ptr, 
                                stan::model::cons_list(stan::model::index_uni(tt), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                                3, 
                                "assigning variable back_ptr");
                    current_statement_begin__ = 195;
                    stan::model::assign(best_logp, 
                                stan::model::cons_list(stan::model::index_uni(tt), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                                logp, 
                                "assigning variable best_logp");
                }
                current_statement_begin__ = 199;
                stan::model::assign(best_logp, 
                            stan::model::cons_list(stan::model::index_uni(tt), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                            stan::math::negative_infinity(), 
                            "assigning variable best_logp");
                current_statement_begin__ = 201;
                stan::math::assign(logp, ((get_base1(get_base1(best_logp, (tt - 1), "best_logp", 1), 1, "best_logp", 2) + stan::math::log(get_base1(theta_quiet, 2, "theta_quiet", 1))) + exp_mod_normal_log(get_base1(yd, (tt + 1), "yd", 1), get_base1(yd, tt, "yd", 1), stan::math::sqrt(sigma2_noise), rate_firing)));
                current_statement_begin__ = 203;
                if (as_bool(logical_gt(logp, get_base1(get_base1(best_logp, tt, "best_logp", 1), 2, "best_logp", 2)))) {

                    current_statement_begin__ = 204;
                    stan::model::assign(back_ptr, 
                                stan::model::cons_list(stan::model::index_uni(tt), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                                1, 
                                "assigning variable back_ptr");
                    current_statement_begin__ = 205;
                    stan::model::assign(best_logp, 
                                stan::model::cons_list(stan::model::index_uni(tt), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                                logp, 
                                "assigning variable best_logp");
                }
                current_statement_begin__ = 208;
                stan::math::assign(logp, ((get_base1(get_base1(best_logp, (tt - 1), "best_logp", 1), 2, "best_logp", 2) + stan::math::log(get_base1(theta_firing, 1, "theta_firing", 1))) + exp_mod_normal_log(get_base1(yd, (tt + 1), "yd", 1), get_base1(yd, tt, "yd", 1), stan::math::sqrt(sigma2_noise), rate_firing)));
                current_statement_begin__ = 211;
                if (as_bool(logical_gt(logp, get_base1(get_base1(best_logp, tt, "best_logp", 1), 2, "best_logp", 2)))) {

                    current_statement_begin__ = 212;
                    stan::model::assign(back_ptr, 
                                stan::model::cons_list(stan::model::index_uni(tt), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                                2, 
                                "assigning variable back_ptr");
                    current_statement_begin__ = 213;
                    stan::model::assign(best_logp, 
                                stan::model::cons_list(stan::model::index_uni(tt), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                                logp, 
                                "assigning variable best_logp");
                }
                current_statement_begin__ = 216;
                stan::math::assign(logp, ((get_base1(get_base1(best_logp, (tt - 1), "best_logp", 1), 3, "best_logp", 2) + stan::math::log(get_base1(theta_decay, 2, "theta_decay", 1))) + exp_mod_normal_log(get_base1(yd, (tt + 1), "yd", 1), get_base1(yd, tt, "yd", 1), stan::math::sqrt(sigma2_noise), rate_firing)));
                current_statement_begin__ = 219;
                if (as_bool(logical_gt(logp, get_base1(get_base1(best_logp, tt, "best_logp", 1), 2, "best_logp", 2)))) {

                    current_statement_begin__ = 220;
                    stan::model::assign(back_ptr, 
                                stan::model::cons_list(stan::model::index_uni(tt), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                                3, 
                                "assigning variable back_ptr");
                    current_statement_begin__ = 221;
                    stan::model::assign(best_logp, 
                                stan::model::cons_list(stan::model::index_uni(tt), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                                logp, 
                                "assigning variable best_logp");
                }
                current_statement_begin__ = 225;
                stan::model::assign(best_logp, 
                            stan::model::cons_list(stan::model::index_uni(tt), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list())), 
                            stan::math::negative_infinity(), 
                            "assigning variable best_logp");
                current_statement_begin__ = 228;
                stan::math::assign(logp, ((get_base1(get_base1(best_logp, (tt - 1), "best_logp", 1), 2, "best_logp", 2) + stan::math::log(get_base1(theta_firing, 2, "theta_firing", 1))) + normal_log(get_base1(yd, (tt + 1), "yd", 1), (rate_decay * get_base1(yd, tt, "yd", 1)), stan::math::sqrt(sigma2_noise))));
                current_statement_begin__ = 231;
                if (as_bool(logical_gt(logp, get_base1(get_base1(best_logp, tt, "best_logp", 1), 3, "best_logp", 2)))) {

                    current_statement_begin__ = 232;
                    stan::model::assign(back_ptr, 
                                stan::model::cons_list(stan::model::index_uni(tt), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list())), 
                                2, 
                                "assigning variable back_ptr");
                    current_statement_begin__ = 233;
                    stan::model::assign(best_logp, 
                                stan::model::cons_list(stan::model::index_uni(tt), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list())), 
                                logp, 
                                "assigning variable best_logp");
                }
                current_statement_begin__ = 237;
                stan::math::assign(logp, ((get_base1(get_base1(best_logp, (tt - 1), "best_logp", 1), 3, "best_logp", 2) + stan::math::log(get_base1(theta_decay, 3, "theta_decay", 1))) + normal_log(get_base1(yd, (tt + 1), "yd", 1), (rate_decay * get_base1(yd, tt, "yd", 1)), stan::math::sqrt(sigma2_noise))));
                current_statement_begin__ = 239;
                if (as_bool(logical_gt(logp, get_base1(get_base1(best_logp, tt, "best_logp", 1), 3, "best_logp", 2)))) {

                    current_statement_begin__ = 240;
                    stan::model::assign(back_ptr, 
                                stan::model::cons_list(stan::model::index_uni(tt), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list())), 
                                3, 
                                "assigning variable back_ptr");
                    current_statement_begin__ = 241;
                    stan::model::assign(best_logp, 
                                stan::model::cons_list(stan::model::index_uni(tt), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list())), 
                                logp, 
                                "assigning variable best_logp");
                }
            }
            current_statement_begin__ = 246;
            stan::math::assign(log_p_state, max(get_base1(best_logp, (N - 1), "best_logp", 1)));
            current_statement_begin__ = 247;
            for (int i = 1; i <= 3; ++i) {

                current_statement_begin__ = 248;
                if (as_bool(logical_eq(get_base1(get_base1(best_logp, (N - 1), "best_logp", 1), i, "best_logp", 2), log_p_state))) {

                    current_statement_begin__ = 249;
                    stan::model::assign(viterbi, 
                                stan::model::cons_list(stan::model::index_uni((N - 1)), stan::model::nil_index_list()), 
                                i, 
                                "assigning variable viterbi");
                }
            }
            current_statement_begin__ = 253;
            for (int tt = 2; tt <= (N - 1); ++tt) {

                current_statement_begin__ = 254;
                stan::model::assign(viterbi, 
                            stan::model::cons_list(stan::model::index_uni((N - tt)), stan::model::nil_index_list()), 
                            get_base1(get_base1(back_ptr, ((N - tt) + 1), "back_ptr", 1), get_base1(viterbi, ((N - tt) + 1), "viterbi", 1), "back_ptr", 2), 
                            "assigning variable viterbi");
            }
            }

            // validate, write generated quantities
            current_statement_begin__ = 159;
            size_t viterbi_i_0_max__ = (N - 1);
            for (size_t i_0__ = 0; i_0__ < viterbi_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "viterbi[i_0__]", viterbi[i_0__], 1);
                check_less_or_equal(function__, "viterbi[i_0__]", viterbi[i_0__], 3);
            }

            size_t viterbi_k_0_max__ = (N - 1);
            for (size_t k_0__ = 0; k_0__ < viterbi_k_0_max__; ++k_0__) {
                vars__.push_back(viterbi[k_0__]);
            }

            current_statement_begin__ = 160;
            size_t trend_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < trend_j_1_max__; ++j_1__) {
                vars__.push_back(trend(j_1__));
            }

            current_statement_begin__ = 161;
            vars__.push_back(log_p_state);

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    std::string model_name() const {
        return "model_CeleriteQPQFDexN";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t eta_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < eta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "eta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "lB";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "lL";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "lP";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "lC";
        param_names__.push_back(param_name_stream__.str());
        size_t theta_quiet_j_1_max__ = 2;
        for (size_t j_1__ = 0; j_1__ < theta_quiet_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta_quiet" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_quiet";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma2_noise";
        param_names__.push_back(param_name_stream__.str());
        size_t theta_firing_j_1_max__ = 2;
        for (size_t j_1__ = 0; j_1__ < theta_firing_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta_firing" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "lograte_firing";
        param_names__.push_back(param_name_stream__.str());
        size_t theta_decay_j_1_max__ = 3;
        for (size_t j_1__ = 0; j_1__ < theta_decay_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta_decay" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "logitrate_decay";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "B";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "L";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "P";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "C";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "rate_firing";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "rate_decay";
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__) return;
        size_t viterbi_k_0_max__ = (N - 1);
        for (size_t k_0__ = 0; k_0__ < viterbi_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "viterbi" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t trend_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < trend_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "trend" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "log_p_state";
        param_names__.push_back(param_name_stream__.str());
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t eta_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < eta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "eta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "lB";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "lL";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "lP";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "lC";
        param_names__.push_back(param_name_stream__.str());
        size_t theta_quiet_j_1_max__ = (2 - 1);
        for (size_t j_1__ = 0; j_1__ < theta_quiet_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta_quiet" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_quiet";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma2_noise";
        param_names__.push_back(param_name_stream__.str());
        size_t theta_firing_j_1_max__ = (2 - 1);
        for (size_t j_1__ = 0; j_1__ < theta_firing_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta_firing" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "lograte_firing";
        param_names__.push_back(param_name_stream__.str());
        size_t theta_decay_j_1_max__ = (3 - 1);
        for (size_t j_1__ = 0; j_1__ < theta_decay_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta_decay" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "logitrate_decay";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "B";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "L";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "P";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "C";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "rate_firing";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "rate_decay";
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__) return;
        size_t viterbi_k_0_max__ = (N - 1);
        for (size_t k_0__ = 0; k_0__ < viterbi_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "viterbi" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t trend_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < trend_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "trend" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "log_p_state";
        param_names__.push_back(param_name_stream__.str());
    }

}; // model

}  // namespace

typedef model_CeleriteQPQFDexN_namespace::model_CeleriteQPQFDexN stan_model;

#ifndef USING_R

stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

#endif


#endif
