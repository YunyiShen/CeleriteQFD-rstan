/*
    CeleriteQFD is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    CeleriteQFD is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with CeleriteQFD.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0

#include <stan/model/model_header.hpp>

namespace model_celeriteSHO_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_celeriteSHO");
    reader.add_event(57, 55, "end", "model_celeriteSHO");
    return reader;
}

template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__>::type>::type, Eigen::Dynamic, 1>
dotCholSHO(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& t,
               const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& y,
               const T2__& S0,
               const T3__& w0,
               const T4__& Q,
               const T5__& eps,
               const Eigen::Matrix<T6__, Eigen::Dynamic, 1>& diag, std::ostream* pstream__);

#include "stan_meta_header.hpp"
 class model_celeriteSHO
  : public stan::model::model_base_crtp<model_celeriteSHO> {
private:
        int N;
        vector_d t;
        vector_d y;
        vector_d S0_prior;
        vector_d w0_prior;
        vector_d Q_prior;
        vector_d err_prior;
        vector_d diag;
        double eps;
public:
    model_celeriteSHO(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_celeriteSHO(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_celeriteSHO_namespace::model_celeriteSHO";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            // initialize data block variables from context__
            current_statement_begin__ = 7;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 1);

            current_statement_begin__ = 8;
            validate_non_negative_index("t", "N", N);
            context__.validate_dims("data initialization", "t", "vector_d", context__.to_vec(N));
            t = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("t");
            pos__ = 0;
            size_t t_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < t_j_1_max__; ++j_1__) {
                t(j_1__) = vals_r__[pos__++];
            }

            current_statement_begin__ = 9;
            validate_non_negative_index("y", "N", N);
            context__.validate_dims("data initialization", "y", "vector_d", context__.to_vec(N));
            y = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("y");
            pos__ = 0;
            size_t y_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < y_j_1_max__; ++j_1__) {
                y(j_1__) = vals_r__[pos__++];
            }

            current_statement_begin__ = 11;
            validate_non_negative_index("S0_prior", "2", 2);
            context__.validate_dims("data initialization", "S0_prior", "vector_d", context__.to_vec(2));
            S0_prior = Eigen::Matrix<double, Eigen::Dynamic, 1>(2);
            vals_r__ = context__.vals_r("S0_prior");
            pos__ = 0;
            size_t S0_prior_j_1_max__ = 2;
            for (size_t j_1__ = 0; j_1__ < S0_prior_j_1_max__; ++j_1__) {
                S0_prior(j_1__) = vals_r__[pos__++];
            }

            current_statement_begin__ = 12;
            validate_non_negative_index("w0_prior", "2", 2);
            context__.validate_dims("data initialization", "w0_prior", "vector_d", context__.to_vec(2));
            w0_prior = Eigen::Matrix<double, Eigen::Dynamic, 1>(2);
            vals_r__ = context__.vals_r("w0_prior");
            pos__ = 0;
            size_t w0_prior_j_1_max__ = 2;
            for (size_t j_1__ = 0; j_1__ < w0_prior_j_1_max__; ++j_1__) {
                w0_prior(j_1__) = vals_r__[pos__++];
            }

            current_statement_begin__ = 13;
            validate_non_negative_index("Q_prior", "2", 2);
            context__.validate_dims("data initialization", "Q_prior", "vector_d", context__.to_vec(2));
            Q_prior = Eigen::Matrix<double, Eigen::Dynamic, 1>(2);
            vals_r__ = context__.vals_r("Q_prior");
            pos__ = 0;
            size_t Q_prior_j_1_max__ = 2;
            for (size_t j_1__ = 0; j_1__ < Q_prior_j_1_max__; ++j_1__) {
                Q_prior(j_1__) = vals_r__[pos__++];
            }

            current_statement_begin__ = 14;
            validate_non_negative_index("err_prior", "2", 2);
            context__.validate_dims("data initialization", "err_prior", "vector_d", context__.to_vec(2));
            err_prior = Eigen::Matrix<double, Eigen::Dynamic, 1>(2);
            vals_r__ = context__.vals_r("err_prior");
            pos__ = 0;
            size_t err_prior_j_1_max__ = 2;
            for (size_t j_1__ = 0; j_1__ < err_prior_j_1_max__; ++j_1__) {
                err_prior(j_1__) = vals_r__[pos__++];
            }

            current_statement_begin__ = 16;
            validate_non_negative_index("diag", "N", N);
            context__.validate_dims("data initialization", "diag", "vector_d", context__.to_vec(N));
            diag = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("diag");
            pos__ = 0;
            size_t diag_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < diag_j_1_max__; ++j_1__) {
                diag(j_1__) = vals_r__[pos__++];
            }


            // initialize transformed data variables
            current_statement_begin__ = 20;
            eps = double(0);
            stan::math::fill(eps, DUMMY_VAR__);
            stan::math::assign(eps,1e-9);

            // execute transformed data statements

            // validate transformed data

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 24;
            validate_non_negative_index("eta", "N", N);
            num_params_r__ += N;
            current_statement_begin__ = 25;
            num_params_r__ += 1;
            current_statement_begin__ = 26;
            num_params_r__ += 1;
            current_statement_begin__ = 27;
            num_params_r__ += 1;
            current_statement_begin__ = 28;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~model_celeriteSHO() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        current_statement_begin__ = 24;
        if (!(context__.contains_r("eta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable eta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("eta");
        pos__ = 0U;
        validate_non_negative_index("eta", "N", N);
        context__.validate_dims("parameter initialization", "eta", "vector_d", context__.to_vec(N));
        Eigen::Matrix<double, Eigen::Dynamic, 1> eta(N);
        size_t eta_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < eta_j_1_max__; ++j_1__) {
            eta(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(eta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable eta: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 25;
        if (!(context__.contains_r("lS0")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable lS0 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("lS0");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "lS0", "double", context__.to_vec());
        double lS0(0);
        lS0 = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(get_base1(S0_prior, 1, "S0_prior", 1), get_base1(S0_prior, 2, "S0_prior", 1), lS0);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable lS0: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 26;
        if (!(context__.contains_r("lw0")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable lw0 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("lw0");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "lw0", "double", context__.to_vec());
        double lw0(0);
        lw0 = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(get_base1(w0_prior, 1, "w0_prior", 1), get_base1(w0_prior, 2, "w0_prior", 1), lw0);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable lw0: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 27;
        if (!(context__.contains_r("lQ")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable lQ missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("lQ");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "lQ", "double", context__.to_vec());
        double lQ(0);
        lQ = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(get_base1(Q_prior, 1, "Q_prior", 1), get_base1(Q_prior, 2, "Q_prior", 1), lQ);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable lQ: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 28;
        if (!(context__.contains_r("err")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable err missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("err");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "err", "double", context__.to_vec());
        double err(0);
        err = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, err);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable err: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);

            // model parameters
            current_statement_begin__ = 24;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> eta;
            (void) eta;  // dummy to suppress unused var warning
            if (jacobian__)
                eta = in__.vector_constrain(N, lp__);
            else
                eta = in__.vector_constrain(N);

            current_statement_begin__ = 25;
            local_scalar_t__ lS0;
            (void) lS0;  // dummy to suppress unused var warning
            if (jacobian__)
                lS0 = in__.scalar_lub_constrain(get_base1(S0_prior, 1, "S0_prior", 1), get_base1(S0_prior, 2, "S0_prior", 1), lp__);
            else
                lS0 = in__.scalar_lub_constrain(get_base1(S0_prior, 1, "S0_prior", 1), get_base1(S0_prior, 2, "S0_prior", 1));

            current_statement_begin__ = 26;
            local_scalar_t__ lw0;
            (void) lw0;  // dummy to suppress unused var warning
            if (jacobian__)
                lw0 = in__.scalar_lub_constrain(get_base1(w0_prior, 1, "w0_prior", 1), get_base1(w0_prior, 2, "w0_prior", 1), lp__);
            else
                lw0 = in__.scalar_lub_constrain(get_base1(w0_prior, 1, "w0_prior", 1), get_base1(w0_prior, 2, "w0_prior", 1));

            current_statement_begin__ = 27;
            local_scalar_t__ lQ;
            (void) lQ;  // dummy to suppress unused var warning
            if (jacobian__)
                lQ = in__.scalar_lub_constrain(get_base1(Q_prior, 1, "Q_prior", 1), get_base1(Q_prior, 2, "Q_prior", 1), lp__);
            else
                lQ = in__.scalar_lub_constrain(get_base1(Q_prior, 1, "Q_prior", 1), get_base1(Q_prior, 2, "Q_prior", 1));

            current_statement_begin__ = 28;
            local_scalar_t__ err;
            (void) err;  // dummy to suppress unused var warning
            if (jacobian__)
                err = in__.scalar_lb_constrain(0, lp__);
            else
                err = in__.scalar_lb_constrain(0);

            // transformed parameters
            current_statement_begin__ = 32;
            local_scalar_t__ S0;
            (void) S0;  // dummy to suppress unused var warning
            stan::math::initialize(S0, DUMMY_VAR__);
            stan::math::fill(S0, DUMMY_VAR__);

            current_statement_begin__ = 33;
            local_scalar_t__ w0;
            (void) w0;  // dummy to suppress unused var warning
            stan::math::initialize(w0, DUMMY_VAR__);
            stan::math::fill(w0, DUMMY_VAR__);

            current_statement_begin__ = 34;
            local_scalar_t__ Q;
            (void) Q;  // dummy to suppress unused var warning
            stan::math::initialize(Q, DUMMY_VAR__);
            stan::math::fill(Q, DUMMY_VAR__);

            // transformed parameters block statements
            current_statement_begin__ = 35;
            stan::math::assign(S0, stan::math::exp(lS0));
            current_statement_begin__ = 36;
            stan::math::assign(w0, stan::math::exp(lw0));
            current_statement_begin__ = 37;
            stan::math::assign(Q, stan::math::exp(lQ));

            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            current_statement_begin__ = 32;
            if (stan::math::is_uninitialized(S0)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: S0";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable S0: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            current_statement_begin__ = 33;
            if (stan::math::is_uninitialized(w0)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: w0";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable w0: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            current_statement_begin__ = 34;
            if (stan::math::is_uninitialized(Q)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: Q";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable Q: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }

            // model body
            {
            current_statement_begin__ = 41;
            validate_non_negative_index("trend", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> trend(N);
            stan::math::initialize(trend, DUMMY_VAR__);
            stan::math::fill(trend, DUMMY_VAR__);


            current_statement_begin__ = 42;
            stan::math::assign(trend, dotCholSHO(t, eta, S0, w0, Q, eps, diag, pstream__));
            current_statement_begin__ = 43;
            lp_accum__.add(inv_gamma_log<propto__>(err, get_base1(err_prior, 1, "err_prior", 1), get_base1(err_prior, 2, "err_prior", 1)));
            current_statement_begin__ = 44;
            lp_accum__.add(normal_log<propto__>(y, trend, stan::math::sqrt(err)));
            current_statement_begin__ = 45;
            lp_accum__.add(normal_log<propto__>(eta, 0, 1));
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("eta");
        names__.push_back("lS0");
        names__.push_back("lw0");
        names__.push_back("lQ");
        names__.push_back("err");
        names__.push_back("S0");
        names__.push_back("w0");
        names__.push_back("Q");
        names__.push_back("trend");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_celeriteSHO_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning

        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, 1> eta = in__.vector_constrain(N);
        size_t eta_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < eta_j_1_max__; ++j_1__) {
            vars__.push_back(eta(j_1__));
        }

        double lS0 = in__.scalar_lub_constrain(get_base1(S0_prior, 1, "S0_prior", 1), get_base1(S0_prior, 2, "S0_prior", 1));
        vars__.push_back(lS0);

        double lw0 = in__.scalar_lub_constrain(get_base1(w0_prior, 1, "w0_prior", 1), get_base1(w0_prior, 2, "w0_prior", 1));
        vars__.push_back(lw0);

        double lQ = in__.scalar_lub_constrain(get_base1(Q_prior, 1, "Q_prior", 1), get_base1(Q_prior, 2, "Q_prior", 1));
        vars__.push_back(lQ);

        double err = in__.scalar_lb_constrain(0);
        vars__.push_back(err);

        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        if (!include_tparams__ && !include_gqs__) return;

        try {
            // declare and define transformed parameters
            current_statement_begin__ = 32;
            double S0;
            (void) S0;  // dummy to suppress unused var warning
            stan::math::initialize(S0, DUMMY_VAR__);
            stan::math::fill(S0, DUMMY_VAR__);

            current_statement_begin__ = 33;
            double w0;
            (void) w0;  // dummy to suppress unused var warning
            stan::math::initialize(w0, DUMMY_VAR__);
            stan::math::fill(w0, DUMMY_VAR__);

            current_statement_begin__ = 34;
            double Q;
            (void) Q;  // dummy to suppress unused var warning
            stan::math::initialize(Q, DUMMY_VAR__);
            stan::math::fill(Q, DUMMY_VAR__);

            // do transformed parameters statements
            current_statement_begin__ = 35;
            stan::math::assign(S0, stan::math::exp(lS0));
            current_statement_begin__ = 36;
            stan::math::assign(w0, stan::math::exp(lw0));
            current_statement_begin__ = 37;
            stan::math::assign(Q, stan::math::exp(lQ));

            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            // write transformed parameters
            if (include_tparams__) {
                vars__.push_back(S0);
                vars__.push_back(w0);
                vars__.push_back(Q);
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 52;
            validate_non_negative_index("trend", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> trend(N);
            stan::math::initialize(trend, DUMMY_VAR__);
            stan::math::fill(trend, DUMMY_VAR__);

            // generated quantities statements
            current_statement_begin__ = 54;
            stan::math::assign(trend, dotCholSHO(t, eta, S0, w0, Q, eps, diag, pstream__));

            // validate, write generated quantities
            current_statement_begin__ = 52;
            size_t trend_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < trend_j_1_max__; ++j_1__) {
                vars__.push_back(trend(j_1__));
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    std::string model_name() const {
        return "model_celeriteSHO";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t eta_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < eta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "eta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "lS0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "lw0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "lQ";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "err";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "S0";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "w0";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "Q";
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__) return;
        size_t trend_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < trend_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "trend" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t eta_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < eta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "eta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "lS0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "lw0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "lQ";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "err";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "S0";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "w0";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "Q";
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__) return;
        size_t trend_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < trend_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "trend" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }

}; // model

}  // namespace

typedef model_celeriteSHO_namespace::model_celeriteSHO stan_model;

#ifndef USING_R

stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

#endif


#endif
