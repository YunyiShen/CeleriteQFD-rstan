/*
    CeleriteQFD is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    CeleriteQFD is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with CeleriteQFD.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0

#include <stan/model/model_header.hpp>

namespace model_celerite_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_celerite");
    reader.add_event(102, 100, "end", "model_celerite");
    return reader;
}

template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__>::type>::type>::type, Eigen::Dynamic, 1>
dotCholRotation(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& t,
                    const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& y,
                    const T2__& sigma,
                    const T3__& period,
                    const T4__& Q0,
                    const T5__& dQ,
                    const T6__& f,
                    const T7__& eps,
                    const Eigen::Matrix<T8__, Eigen::Dynamic, 1>& diag, std::ostream* pstream__);

template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__>::type>::type>::type
logLikRotation(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& t,
                   const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& y,
                   const T2__& sigma,
                   const T3__& period,
                   const T4__& Q0,
                   const T5__& dQ,
                   const T6__& f,
                   const T7__& eps,
                   const Eigen::Matrix<T8__, Eigen::Dynamic, 1>& diag, std::ostream* pstream__);

#include "stan_meta_header.hpp"
 class model_celerite
  : public stan::model::model_base_crtp<model_celerite> {
private:
        int N;
        vector_d t;
        vector_d y;
        vector_d sigma_prior;
        vector_d period_prior;
        vector_d Q0_prior;
        vector_d dQ_prior;
        vector_d f_prior;
        vector_d err_prior;
        vector_d diag;
        double eps;
public:
    model_celerite(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_celerite(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_celerite_namespace::model_celerite";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            // initialize data block variables from context__
            current_statement_begin__ = 10;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 1);

            current_statement_begin__ = 11;
            validate_non_negative_index("t", "N", N);
            context__.validate_dims("data initialization", "t", "vector_d", context__.to_vec(N));
            t = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("t");
            pos__ = 0;
            size_t t_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < t_j_1_max__; ++j_1__) {
                t(j_1__) = vals_r__[pos__++];
            }

            current_statement_begin__ = 12;
            validate_non_negative_index("y", "N", N);
            context__.validate_dims("data initialization", "y", "vector_d", context__.to_vec(N));
            y = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("y");
            pos__ = 0;
            size_t y_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < y_j_1_max__; ++j_1__) {
                y(j_1__) = vals_r__[pos__++];
            }

            current_statement_begin__ = 14;
            validate_non_negative_index("sigma_prior", "2", 2);
            context__.validate_dims("data initialization", "sigma_prior", "vector_d", context__.to_vec(2));
            sigma_prior = Eigen::Matrix<double, Eigen::Dynamic, 1>(2);
            vals_r__ = context__.vals_r("sigma_prior");
            pos__ = 0;
            size_t sigma_prior_j_1_max__ = 2;
            for (size_t j_1__ = 0; j_1__ < sigma_prior_j_1_max__; ++j_1__) {
                sigma_prior(j_1__) = vals_r__[pos__++];
            }

            current_statement_begin__ = 15;
            validate_non_negative_index("period_prior", "2", 2);
            context__.validate_dims("data initialization", "period_prior", "vector_d", context__.to_vec(2));
            period_prior = Eigen::Matrix<double, Eigen::Dynamic, 1>(2);
            vals_r__ = context__.vals_r("period_prior");
            pos__ = 0;
            size_t period_prior_j_1_max__ = 2;
            for (size_t j_1__ = 0; j_1__ < period_prior_j_1_max__; ++j_1__) {
                period_prior(j_1__) = vals_r__[pos__++];
            }

            current_statement_begin__ = 16;
            validate_non_negative_index("Q0_prior", "2", 2);
            context__.validate_dims("data initialization", "Q0_prior", "vector_d", context__.to_vec(2));
            Q0_prior = Eigen::Matrix<double, Eigen::Dynamic, 1>(2);
            vals_r__ = context__.vals_r("Q0_prior");
            pos__ = 0;
            size_t Q0_prior_j_1_max__ = 2;
            for (size_t j_1__ = 0; j_1__ < Q0_prior_j_1_max__; ++j_1__) {
                Q0_prior(j_1__) = vals_r__[pos__++];
            }

            current_statement_begin__ = 17;
            validate_non_negative_index("dQ_prior", "2", 2);
            context__.validate_dims("data initialization", "dQ_prior", "vector_d", context__.to_vec(2));
            dQ_prior = Eigen::Matrix<double, Eigen::Dynamic, 1>(2);
            vals_r__ = context__.vals_r("dQ_prior");
            pos__ = 0;
            size_t dQ_prior_j_1_max__ = 2;
            for (size_t j_1__ = 0; j_1__ < dQ_prior_j_1_max__; ++j_1__) {
                dQ_prior(j_1__) = vals_r__[pos__++];
            }

            current_statement_begin__ = 18;
            validate_non_negative_index("f_prior", "2", 2);
            context__.validate_dims("data initialization", "f_prior", "vector_d", context__.to_vec(2));
            f_prior = Eigen::Matrix<double, Eigen::Dynamic, 1>(2);
            vals_r__ = context__.vals_r("f_prior");
            pos__ = 0;
            size_t f_prior_j_1_max__ = 2;
            for (size_t j_1__ = 0; j_1__ < f_prior_j_1_max__; ++j_1__) {
                f_prior(j_1__) = vals_r__[pos__++];
            }

            current_statement_begin__ = 19;
            validate_non_negative_index("err_prior", "2", 2);
            context__.validate_dims("data initialization", "err_prior", "vector_d", context__.to_vec(2));
            err_prior = Eigen::Matrix<double, Eigen::Dynamic, 1>(2);
            vals_r__ = context__.vals_r("err_prior");
            pos__ = 0;
            size_t err_prior_j_1_max__ = 2;
            for (size_t j_1__ = 0; j_1__ < err_prior_j_1_max__; ++j_1__) {
                err_prior(j_1__) = vals_r__[pos__++];
            }

            current_statement_begin__ = 21;
            validate_non_negative_index("diag", "N", N);
            context__.validate_dims("data initialization", "diag", "vector_d", context__.to_vec(N));
            diag = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("diag");
            pos__ = 0;
            size_t diag_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < diag_j_1_max__; ++j_1__) {
                diag(j_1__) = vals_r__[pos__++];
            }


            // initialize transformed data variables
            current_statement_begin__ = 25;
            eps = double(0);
            stan::math::fill(eps, DUMMY_VAR__);
            stan::math::assign(eps,1e-9);

            // execute transformed data statements

            // validate transformed data

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 29;
            validate_non_negative_index("eta", "N", N);
            num_params_r__ += N;
            current_statement_begin__ = 30;
            num_params_r__ += 1;
            current_statement_begin__ = 31;
            num_params_r__ += 1;
            current_statement_begin__ = 32;
            num_params_r__ += 1;
            current_statement_begin__ = 33;
            num_params_r__ += 1;
            current_statement_begin__ = 34;
            num_params_r__ += 1;
            current_statement_begin__ = 35;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~model_celerite() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        current_statement_begin__ = 29;
        if (!(context__.contains_r("eta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable eta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("eta");
        pos__ = 0U;
        validate_non_negative_index("eta", "N", N);
        context__.validate_dims("parameter initialization", "eta", "vector_d", context__.to_vec(N));
        Eigen::Matrix<double, Eigen::Dynamic, 1> eta(N);
        size_t eta_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < eta_j_1_max__; ++j_1__) {
            eta(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(eta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable eta: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 30;
        if (!(context__.contains_r("lsigma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable lsigma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("lsigma");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "lsigma", "double", context__.to_vec());
        double lsigma(0);
        lsigma = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(get_base1(sigma_prior, 1, "sigma_prior", 1), get_base1(sigma_prior, 2, "sigma_prior", 1), lsigma);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable lsigma: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 31;
        if (!(context__.contains_r("lperiod")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable lperiod missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("lperiod");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "lperiod", "double", context__.to_vec());
        double lperiod(0);
        lperiod = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(get_base1(period_prior, 1, "period_prior", 1), get_base1(period_prior, 2, "period_prior", 1), lperiod);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable lperiod: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 32;
        if (!(context__.contains_r("lQ0")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable lQ0 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("lQ0");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "lQ0", "double", context__.to_vec());
        double lQ0(0);
        lQ0 = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(get_base1(Q0_prior, 1, "Q0_prior", 1), get_base1(Q0_prior, 2, "Q0_prior", 1), lQ0);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable lQ0: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 33;
        if (!(context__.contains_r("ldQ")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable ldQ missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("ldQ");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "ldQ", "double", context__.to_vec());
        double ldQ(0);
        ldQ = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(get_base1(dQ_prior, 1, "dQ_prior", 1), get_base1(dQ_prior, 2, "dQ_prior", 1), ldQ);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable ldQ: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 34;
        if (!(context__.contains_r("f")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable f missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("f");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "f", "double", context__.to_vec());
        double f(0);
        f = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(get_base1(f_prior, 1, "f_prior", 1), get_base1(f_prior, 2, "f_prior", 1), f);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable f: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 35;
        if (!(context__.contains_r("err")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable err missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("err");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "err", "double", context__.to_vec());
        double err(0);
        err = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, err);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable err: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);

            // model parameters
            current_statement_begin__ = 29;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> eta;
            (void) eta;  // dummy to suppress unused var warning
            if (jacobian__)
                eta = in__.vector_constrain(N, lp__);
            else
                eta = in__.vector_constrain(N);

            current_statement_begin__ = 30;
            local_scalar_t__ lsigma;
            (void) lsigma;  // dummy to suppress unused var warning
            if (jacobian__)
                lsigma = in__.scalar_lub_constrain(get_base1(sigma_prior, 1, "sigma_prior", 1), get_base1(sigma_prior, 2, "sigma_prior", 1), lp__);
            else
                lsigma = in__.scalar_lub_constrain(get_base1(sigma_prior, 1, "sigma_prior", 1), get_base1(sigma_prior, 2, "sigma_prior", 1));

            current_statement_begin__ = 31;
            local_scalar_t__ lperiod;
            (void) lperiod;  // dummy to suppress unused var warning
            if (jacobian__)
                lperiod = in__.scalar_lub_constrain(get_base1(period_prior, 1, "period_prior", 1), get_base1(period_prior, 2, "period_prior", 1), lp__);
            else
                lperiod = in__.scalar_lub_constrain(get_base1(period_prior, 1, "period_prior", 1), get_base1(period_prior, 2, "period_prior", 1));

            current_statement_begin__ = 32;
            local_scalar_t__ lQ0;
            (void) lQ0;  // dummy to suppress unused var warning
            if (jacobian__)
                lQ0 = in__.scalar_lub_constrain(get_base1(Q0_prior, 1, "Q0_prior", 1), get_base1(Q0_prior, 2, "Q0_prior", 1), lp__);
            else
                lQ0 = in__.scalar_lub_constrain(get_base1(Q0_prior, 1, "Q0_prior", 1), get_base1(Q0_prior, 2, "Q0_prior", 1));

            current_statement_begin__ = 33;
            local_scalar_t__ ldQ;
            (void) ldQ;  // dummy to suppress unused var warning
            if (jacobian__)
                ldQ = in__.scalar_lub_constrain(get_base1(dQ_prior, 1, "dQ_prior", 1), get_base1(dQ_prior, 2, "dQ_prior", 1), lp__);
            else
                ldQ = in__.scalar_lub_constrain(get_base1(dQ_prior, 1, "dQ_prior", 1), get_base1(dQ_prior, 2, "dQ_prior", 1));

            current_statement_begin__ = 34;
            local_scalar_t__ f;
            (void) f;  // dummy to suppress unused var warning
            if (jacobian__)
                f = in__.scalar_lub_constrain(get_base1(f_prior, 1, "f_prior", 1), get_base1(f_prior, 2, "f_prior", 1), lp__);
            else
                f = in__.scalar_lub_constrain(get_base1(f_prior, 1, "f_prior", 1), get_base1(f_prior, 2, "f_prior", 1));

            current_statement_begin__ = 35;
            local_scalar_t__ err;
            (void) err;  // dummy to suppress unused var warning
            if (jacobian__)
                err = in__.scalar_lb_constrain(0, lp__);
            else
                err = in__.scalar_lb_constrain(0);

            // transformed parameters
            current_statement_begin__ = 39;
            local_scalar_t__ sigma;
            (void) sigma;  // dummy to suppress unused var warning
            stan::math::initialize(sigma, DUMMY_VAR__);
            stan::math::fill(sigma, DUMMY_VAR__);

            current_statement_begin__ = 40;
            local_scalar_t__ period;
            (void) period;  // dummy to suppress unused var warning
            stan::math::initialize(period, DUMMY_VAR__);
            stan::math::fill(period, DUMMY_VAR__);

            current_statement_begin__ = 41;
            local_scalar_t__ Q0;
            (void) Q0;  // dummy to suppress unused var warning
            stan::math::initialize(Q0, DUMMY_VAR__);
            stan::math::fill(Q0, DUMMY_VAR__);

            current_statement_begin__ = 42;
            local_scalar_t__ dQ;
            (void) dQ;  // dummy to suppress unused var warning
            stan::math::initialize(dQ, DUMMY_VAR__);
            stan::math::fill(dQ, DUMMY_VAR__);

            // transformed parameters block statements
            current_statement_begin__ = 43;
            stan::math::assign(sigma, stan::math::exp(lsigma));
            current_statement_begin__ = 44;
            stan::math::assign(period, stan::math::exp(lperiod));
            current_statement_begin__ = 45;
            stan::math::assign(Q0, stan::math::exp(lQ0));
            current_statement_begin__ = 47;
            stan::math::assign(dQ, stan::math::exp(ldQ));

            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            current_statement_begin__ = 39;
            if (stan::math::is_uninitialized(sigma)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: sigma";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable sigma: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            current_statement_begin__ = 40;
            if (stan::math::is_uninitialized(period)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: period";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable period: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            current_statement_begin__ = 41;
            if (stan::math::is_uninitialized(Q0)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: Q0";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable Q0: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            current_statement_begin__ = 42;
            if (stan::math::is_uninitialized(dQ)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: dQ";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable dQ: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }

            // model body
            {
            current_statement_begin__ = 51;
            validate_non_negative_index("trend", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> trend(N);
            stan::math::initialize(trend, DUMMY_VAR__);
            stan::math::fill(trend, DUMMY_VAR__);


            current_statement_begin__ = 52;
            stan::math::assign(trend, dotCholRotation(t, eta, sigma, period, Q0, dQ, f, eps, diag, pstream__));
            current_statement_begin__ = 54;
            lp_accum__.add(inv_gamma_log<propto__>(err, get_base1(err_prior, 1, "err_prior", 1), get_base1(err_prior, 2, "err_prior", 1)));
            current_statement_begin__ = 55;
            lp_accum__.add(normal_log<propto__>(y, trend, stan::math::sqrt(err)));
            current_statement_begin__ = 56;
            lp_accum__.add(normal_log<propto__>(eta, 0, 1));
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("eta");
        names__.push_back("lsigma");
        names__.push_back("lperiod");
        names__.push_back("lQ0");
        names__.push_back("ldQ");
        names__.push_back("f");
        names__.push_back("err");
        names__.push_back("sigma");
        names__.push_back("period");
        names__.push_back("Q0");
        names__.push_back("dQ");
        names__.push_back("Q1");
        names__.push_back("w1");
        names__.push_back("S1");
        names__.push_back("Q2");
        names__.push_back("w2");
        names__.push_back("S2");
        names__.push_back("sigma1");
        names__.push_back("rho1");
        names__.push_back("tau1");
        names__.push_back("sigma2");
        names__.push_back("rho2");
        names__.push_back("tau2");
        names__.push_back("amp");
        names__.push_back("trend");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_celerite_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning

        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, 1> eta = in__.vector_constrain(N);
        size_t eta_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < eta_j_1_max__; ++j_1__) {
            vars__.push_back(eta(j_1__));
        }

        double lsigma = in__.scalar_lub_constrain(get_base1(sigma_prior, 1, "sigma_prior", 1), get_base1(sigma_prior, 2, "sigma_prior", 1));
        vars__.push_back(lsigma);

        double lperiod = in__.scalar_lub_constrain(get_base1(period_prior, 1, "period_prior", 1), get_base1(period_prior, 2, "period_prior", 1));
        vars__.push_back(lperiod);

        double lQ0 = in__.scalar_lub_constrain(get_base1(Q0_prior, 1, "Q0_prior", 1), get_base1(Q0_prior, 2, "Q0_prior", 1));
        vars__.push_back(lQ0);

        double ldQ = in__.scalar_lub_constrain(get_base1(dQ_prior, 1, "dQ_prior", 1), get_base1(dQ_prior, 2, "dQ_prior", 1));
        vars__.push_back(ldQ);

        double f = in__.scalar_lub_constrain(get_base1(f_prior, 1, "f_prior", 1), get_base1(f_prior, 2, "f_prior", 1));
        vars__.push_back(f);

        double err = in__.scalar_lb_constrain(0);
        vars__.push_back(err);

        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        if (!include_tparams__ && !include_gqs__) return;

        try {
            // declare and define transformed parameters
            current_statement_begin__ = 39;
            double sigma;
            (void) sigma;  // dummy to suppress unused var warning
            stan::math::initialize(sigma, DUMMY_VAR__);
            stan::math::fill(sigma, DUMMY_VAR__);

            current_statement_begin__ = 40;
            double period;
            (void) period;  // dummy to suppress unused var warning
            stan::math::initialize(period, DUMMY_VAR__);
            stan::math::fill(period, DUMMY_VAR__);

            current_statement_begin__ = 41;
            double Q0;
            (void) Q0;  // dummy to suppress unused var warning
            stan::math::initialize(Q0, DUMMY_VAR__);
            stan::math::fill(Q0, DUMMY_VAR__);

            current_statement_begin__ = 42;
            double dQ;
            (void) dQ;  // dummy to suppress unused var warning
            stan::math::initialize(dQ, DUMMY_VAR__);
            stan::math::fill(dQ, DUMMY_VAR__);

            // do transformed parameters statements
            current_statement_begin__ = 43;
            stan::math::assign(sigma, stan::math::exp(lsigma));
            current_statement_begin__ = 44;
            stan::math::assign(period, stan::math::exp(lperiod));
            current_statement_begin__ = 45;
            stan::math::assign(Q0, stan::math::exp(lQ0));
            current_statement_begin__ = 47;
            stan::math::assign(dQ, stan::math::exp(ldQ));

            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            // write transformed parameters
            if (include_tparams__) {
                vars__.push_back(sigma);
                vars__.push_back(period);
                vars__.push_back(Q0);
                vars__.push_back(dQ);
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 63;
            double Q1;
            (void) Q1;  // dummy to suppress unused var warning
            stan::math::initialize(Q1, DUMMY_VAR__);
            stan::math::fill(Q1, DUMMY_VAR__);

            current_statement_begin__ = 64;
            double w1;
            (void) w1;  // dummy to suppress unused var warning
            stan::math::initialize(w1, DUMMY_VAR__);
            stan::math::fill(w1, DUMMY_VAR__);

            current_statement_begin__ = 65;
            double S1;
            (void) S1;  // dummy to suppress unused var warning
            stan::math::initialize(S1, DUMMY_VAR__);
            stan::math::fill(S1, DUMMY_VAR__);

            current_statement_begin__ = 66;
            double Q2;
            (void) Q2;  // dummy to suppress unused var warning
            stan::math::initialize(Q2, DUMMY_VAR__);
            stan::math::fill(Q2, DUMMY_VAR__);

            current_statement_begin__ = 67;
            double w2;
            (void) w2;  // dummy to suppress unused var warning
            stan::math::initialize(w2, DUMMY_VAR__);
            stan::math::fill(w2, DUMMY_VAR__);

            current_statement_begin__ = 68;
            double S2;
            (void) S2;  // dummy to suppress unused var warning
            stan::math::initialize(S2, DUMMY_VAR__);
            stan::math::fill(S2, DUMMY_VAR__);

            current_statement_begin__ = 70;
            double sigma1;
            (void) sigma1;  // dummy to suppress unused var warning
            stan::math::initialize(sigma1, DUMMY_VAR__);
            stan::math::fill(sigma1, DUMMY_VAR__);

            current_statement_begin__ = 71;
            double rho1;
            (void) rho1;  // dummy to suppress unused var warning
            stan::math::initialize(rho1, DUMMY_VAR__);
            stan::math::fill(rho1, DUMMY_VAR__);

            current_statement_begin__ = 72;
            double tau1;
            (void) tau1;  // dummy to suppress unused var warning
            stan::math::initialize(tau1, DUMMY_VAR__);
            stan::math::fill(tau1, DUMMY_VAR__);

            current_statement_begin__ = 74;
            double sigma2;
            (void) sigma2;  // dummy to suppress unused var warning
            stan::math::initialize(sigma2, DUMMY_VAR__);
            stan::math::fill(sigma2, DUMMY_VAR__);

            current_statement_begin__ = 75;
            double rho2;
            (void) rho2;  // dummy to suppress unused var warning
            stan::math::initialize(rho2, DUMMY_VAR__);
            stan::math::fill(rho2, DUMMY_VAR__);

            current_statement_begin__ = 76;
            double tau2;
            (void) tau2;  // dummy to suppress unused var warning
            stan::math::initialize(tau2, DUMMY_VAR__);
            stan::math::fill(tau2, DUMMY_VAR__);

            current_statement_begin__ = 78;
            double amp;
            (void) amp;  // dummy to suppress unused var warning
            stan::math::initialize(amp, DUMMY_VAR__);
            stan::math::fill(amp, DUMMY_VAR__);

            current_statement_begin__ = 79;
            validate_non_negative_index("trend", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> trend(N);
            stan::math::initialize(trend, DUMMY_VAR__);
            stan::math::fill(trend, DUMMY_VAR__);

            // generated quantities statements
            current_statement_begin__ = 81;
            stan::math::assign(amp, ((sigma * sigma) / (1 + f)));
            current_statement_begin__ = 82;
            stan::math::assign(Q1, ((0.5 + Q0) + dQ));
            current_statement_begin__ = 83;
            stan::math::assign(w1, (((4 * 3.1415926) * Q1) / (period * stan::math::sqrt((((4 * Q1) * Q1) - 1)))));
            current_statement_begin__ = 84;
            stan::math::assign(S1, (amp / (w1 * Q1)));
            current_statement_begin__ = 85;
            stan::math::assign(Q2, (0.5 + Q0));
            current_statement_begin__ = 86;
            stan::math::assign(w2, (((8 * 3.1415926) * Q2) / (period * stan::math::sqrt((((4 * Q2) * Q2) - 1)))));
            current_statement_begin__ = 87;
            stan::math::assign(S2, ((f * amp) / (w2 * Q2)));
            current_statement_begin__ = 89;
            stan::math::assign(rho1, ((2 * 3.1415926) / w1));
            current_statement_begin__ = 90;
            stan::math::assign(rho2, ((2 * 3.1415926) / w2));
            current_statement_begin__ = 91;
            stan::math::assign(tau1, ((2 * Q1) / w1));
            current_statement_begin__ = 92;
            stan::math::assign(tau2, ((2 * Q2) / w2));
            current_statement_begin__ = 93;
            stan::math::assign(sigma1, stan::math::sqrt(((S1 * w1) * Q1)));
            current_statement_begin__ = 94;
            stan::math::assign(sigma2, stan::math::sqrt(((S2 * w2) * Q2)));
            current_statement_begin__ = 98;
            stan::math::assign(trend, dotCholRotation(t, eta, sigma, period, Q0, dQ, f, eps, diag, pstream__));

            // validate, write generated quantities
            current_statement_begin__ = 63;
            vars__.push_back(Q1);

            current_statement_begin__ = 64;
            vars__.push_back(w1);

            current_statement_begin__ = 65;
            vars__.push_back(S1);

            current_statement_begin__ = 66;
            vars__.push_back(Q2);

            current_statement_begin__ = 67;
            vars__.push_back(w2);

            current_statement_begin__ = 68;
            vars__.push_back(S2);

            current_statement_begin__ = 70;
            vars__.push_back(sigma1);

            current_statement_begin__ = 71;
            vars__.push_back(rho1);

            current_statement_begin__ = 72;
            vars__.push_back(tau1);

            current_statement_begin__ = 74;
            vars__.push_back(sigma2);

            current_statement_begin__ = 75;
            vars__.push_back(rho2);

            current_statement_begin__ = 76;
            vars__.push_back(tau2);

            current_statement_begin__ = 78;
            vars__.push_back(amp);

            current_statement_begin__ = 79;
            size_t trend_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < trend_j_1_max__; ++j_1__) {
                vars__.push_back(trend(j_1__));
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    std::string model_name() const {
        return "model_celerite";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t eta_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < eta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "eta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "lsigma";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "lperiod";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "lQ0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "ldQ";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "f";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "err";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "period";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "Q0";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "dQ";
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "Q1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "w1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "S1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Q2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "w2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "S2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "rho1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "rho2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "amp";
        param_names__.push_back(param_name_stream__.str());
        size_t trend_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < trend_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "trend" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t eta_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < eta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "eta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "lsigma";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "lperiod";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "lQ0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "ldQ";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "f";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "err";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "period";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "Q0";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "dQ";
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "Q1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "w1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "S1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Q2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "w2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "S2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "rho1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "rho2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "amp";
        param_names__.push_back(param_name_stream__.str());
        size_t trend_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < trend_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "trend" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }

}; // model

}  // namespace

typedef model_celerite_namespace::model_celerite stan_model;

#ifndef USING_R

stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

#endif


#endif
